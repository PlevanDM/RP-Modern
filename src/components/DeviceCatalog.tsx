import { useState, useEffect } from 'react';
import { DeviceModel, User } from '../types/models';
import { DeviceGallery } from './DeviceGallery';
import { useIFixitGuides } from '../hooks/useApi';
import { CreateOrderModal } from './CreateOrderModal';
import { Order } from '../types/models';

interface DeviceCatalogProps {
  currentUser?: User;
}

export function DeviceCatalog({ currentUser: userProp }: DeviceCatalogProps) {
  const [selectedDevice, setSelectedDevice] = useState<DeviceModel | null>(
    null
  );
  const [currentUser, setCurrentUser] = useState<User | undefined>(
    userProp
  );
  const [selectedColor, setSelectedColor] = useState<string | null>(null);
  const [selectedStorage, setSelectedStorage] = useState<string | null>(null);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showCreateOrderModal, setShowCreateOrderModal] = useState(false);
  const [createdOrderData, setCreatedOrderData] = useState<{
    device: string;
    color: string;
    storage: string;
  } | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º iFixit –≥–∞–π–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
  const { guides: ifixitGuide, loading: guidesLoading } = useIFixitGuides(
    currentUser?.role === 'master' ? selectedDevice?.name : undefined
  );

  useEffect(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π prop –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ localStorage
    if (userProp) {
      setCurrentUser(userProp);
    } else {
      const savedUser = localStorage.getItem('currentUser');
      if (savedUser) {
        try {
          const userData = JSON.parse(savedUser);
          setCurrentUser(userData);
        } catch (error) {
          console.error('Error loading user from localStorage:', error);
        }
      }
    }
  }, [userProp]);

  const handleDeviceSelect = (device: DeviceModel) => {
    setSelectedDevice(device);
    setSelectedColor(null);
    setSelectedStorage(null);
    console.log('Selected device:', device);
  };

  const handleCloseModal = () => {
    setSelectedDevice(null);
    setSelectedColor(null);
    setSelectedStorage(null);
  };

  const handleCreateOrder = () => {
    if (!selectedDevice || !selectedColor || !selectedStorage) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä —Ç–∞ –ø–∞–º\'—è—Ç—å');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–∫–∞–∑–∞
    const orderId = 'order-' + Date.now();
    const now = new Date().toISOString();

    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const newOrder = {
      id: orderId,
      title: `${selectedDevice.brand} ${selectedDevice.name}`,
      description: `–ü—Ä–∏—Å—Ç—Ä—ñ–π: ${selectedDevice.name}\n–ö–æ–ª—ñ—Ä: ${selectedColor}\n–ü–∞–º'—è—Ç—å: ${selectedStorage}`,
      deviceType: selectedDevice.category,
      device: selectedDevice.name,
      issue: '–ü–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É',
      budget: selectedDevice.price?.min || 5000,
      city: '–ö–∏—ó–≤', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      status: 'open' as const,
      urgency: 'medium' as const,
      createdAt: now,
      updatedAt: now,
      clientId: currentUser?.id || 'client-1',
      brand: selectedDevice.brand,
      category: selectedDevice.category,
      color: selectedColor,
      storage: selectedStorage
    };

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞:', newOrder);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ localStorage
    try {
      const existingOrders = JSON.parse(localStorage.getItem('repair_master_orders') || '[]');
      const updatedOrders = [newOrder, ...existingOrders];
      localStorage.setItem('repair_master_orders', JSON.stringify(updatedOrders));
      console.log('üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
      window.dispatchEvent(new CustomEvent('ordersUpdated'));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    setCreatedOrderData({
      device: selectedDevice.name,
      color: selectedColor,
      storage: selectedStorage
    });
    setShowSuccessModal(true);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    setTimeout(() => {
      handleCloseModal();
    }, 300);
  };

  const handleCreateOrderFromModal = (orderData: Partial<Order>) => {
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', orderData);
    try {
      const existingOrders = JSON.parse(localStorage.getItem('repair_master_orders') || '[]');
      const updatedOrders = [orderData, ...existingOrders];
      localStorage.setItem('repair_master_orders', JSON.stringify(updatedOrders));
      console.log('üíæ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
      window.dispatchEvent(new CustomEvent('ordersUpdated'));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    }
    setShowCreateOrderModal(false);
    setShowSuccessModal(true);
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
  const isMaster = currentUser?.role === 'master';

  return (
    <>
      <div className="min-h-screen bg-gray-50 py-4">
        <div className="max-w-5xl mx-auto px-2 sm:px-4 flex flex-col items-center">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ */}
          <div className="text-center mb-6 w-full">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              {isMaster ? '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤' : '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞'}
            </h1>
            <p className="text-sm text-gray-600">
              {isMaster
                ? '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Apple –∏ Dyson'
                : '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å'
              }
            </p>
          </div>

          <DeviceGallery onDeviceSelect={handleDeviceSelect} isMaster={isMaster} />

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
          {selectedDevice && (
  <div className="create-order-button-container">
    <button
      onClick={() => {
        setCreatedOrderData({
          device: selectedDevice.name,
          color: selectedColor || 'default',
          storage: selectedStorage || 'default'
        });
        setShowCreateOrderModal(true);
      }}
      className="btn btn-primary btn-large"
    >
      üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
    </button>
  </div>
)}
          {showCreateOrderModal && (
            <CreateOrderModal
              isOpen={showCreateOrderModal}
              onClose={() => setShowCreateOrderModal(false)}
              onSubmit={handleCreateOrderFromModal}
              currentUser={currentUser}
              initialData={{
                title: `–†–µ–º–æ–Ω—Ç ${createdOrderData?.device}`,
                description: `–¶–≤–µ—Ç: ${createdOrderData?.color}, –ü–∞–º—è—Ç—å: ${createdOrderData?.storage}`,
              }}
            />
          )}
          {selectedDevice && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 overflow-x-hidden">
              <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                <div className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h2 className="text-2xl font-bold text-gray-900">
                        {selectedDevice.name}
                      </h2>
                      <p className="text-gray-600">
                        {selectedDevice.brand} ‚Ä¢ {selectedDevice.category}
                      </p>
                    </div>
                    <button
                      onClick={handleCloseModal}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>

                  {isMaster ? (
                    // ===== –£–ü–†–û–©–Å–ù–ù–´–ô –í–ê–†–ò–ê–ù–¢ –î–õ–Ø –ú–ê–°–¢–ï–†–ê =====
                    <div className="space-y-6">
                      {/* –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
                      <div>
                        <h3 className="text-lg font-semibold mb-3">–§–æ—Ç–æ –ø—Ä–∏—Å—Ç—Ä–æ—é</h3>
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                          {selectedDevice.photos.slice(0, 6).map((photo) => (
                            <div
                              key={photo.id}
                              className="aspect-square bg-gray-100 rounded-lg overflow-hidden"
                            >
                              <img
                                src={photo.url}
                                alt={photo.alt}
                                className="w-full h-full object-cover"
                                onError={(e) => {
                                  const target = e.target as HTMLImageElement;
                                  target.src = `https://via.placeholder.com/300x300?text=${selectedDevice.name}`;
                                }}
                              />
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* –ú–æ–¥–µ–ª—å–Ω—ã–µ –∫–æ–¥—ã */}
                      {selectedDevice.modelCodes && selectedDevice.modelCodes.length > 0 && (
                        <div>
                          <h4 className="font-semibold text-gray-900 mb-3">–ú–æ–¥–µ–ª—å–Ω—ñ –∫–æ–¥–∏ (A-–∫–æ–¥–∏):</h4>
                          <div className="flex flex-wrap gap-2">
                            {selectedDevice.modelCodes.map((code) => (
                              <span
                                key={code}
                                className="px-4 py-2 bg-purple-100 text-purple-900 rounded-lg text-sm font-mono font-semibold border border-purple-300"
                              >
                                {code}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –ø–æ–∫–æ–ª–µ–Ω–∏–µ */}
                      <div className="grid grid-cols-2 gap-4">
                        {selectedDevice.year && (
                          <div className="bg-gray-50 p-3 rounded-lg">
                            <p className="text-sm text-gray-600">–†—ñ–∫ –≤–∏–ø—É—Å–∫—É:</p>
                            <p className="text-lg font-semibold text-gray-900">{selectedDevice.year}</p>
                          </div>
                        )}
                        {selectedDevice.generation && (
                          <div className="bg-gray-50 p-3 rounded-lg">
                            <p className="text-sm text-gray-600">–ü–æ–∫–æ–ª—ñ–Ω–Ω—è:</p>
                            <p className="text-lg font-semibold text-gray-900">{selectedDevice.generation}</p>
                          </div>
                        )}
                      </div>

                      {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ */}
                      <div className="pt-4 grid grid-cols-2 gap-3">
                        <button className="bg-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors">
                          –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥–∏
                        </button>
                        <button
                          onClick={handleCloseModal}
                          className="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                        >
                          –ó–∞–∫—Ä–∏—Ç–∏
                        </button>
                      </div>
                    </div>
                  ) : (
                    // ===== –ü–û–õ–ù–´–ô –í–ê–†–ò–ê–ù–¢ –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê =====
                    <div className="space-y-6">
                      {/* –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-3">
                          üé® –í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä:
                        </label>
                        <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                          {selectedDevice.colors.map(color => (
                            <button
                              key={color}
                              onClick={() => setSelectedColor(color)}
                              className={`px-4 py-2 border-2 rounded-lg text-sm font-medium transition-all ${
                                selectedColor === color
                                  ? 'border-purple-600 bg-purple-50 text-purple-900'
                                  : 'border-gray-300 text-gray-700 hover:border-purple-500 hover:bg-purple-50'
                              }`}
                            >
                              {color}
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* –í—ã–±–æ—Ä –ø–∞–º—è—Ç–∏ */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-3">
                          üíæ –í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–º'—è—Ç—å:
                        </label>
                        <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                          {selectedDevice.storageOptions.map(storage => (
                            <button
                              key={storage}
                              onClick={() => setSelectedStorage(storage)}
                              className={`px-4 py-2 border-2 rounded-lg text-sm font-medium transition-all ${
                                selectedStorage === storage
                                  ? 'border-purple-600 bg-purple-50 text-purple-900'
                                  : 'border-gray-300 text-gray-700 hover:border-purple-500 hover:bg-purple-50'
                              }`}
                            >
                              {storage}
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* iFixit –≥–∞–π–¥—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ */}
                      {currentUser?.role === 'master' && (
                        <>
                          {guidesLoading && (
                            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                              <p className="text-sm text-blue-800">üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≥–∞–π–¥—ã —Ä–µ–º–æ–Ω—Ç—É...</p>
                            </div>
                          )}
                          {ifixitGuide && (
                            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                              <div className="flex items-start gap-3">
                                <span className="text-xl">üîß</span>
                                <div className="flex-1">
                                  <h4 className="font-semibold text-green-900 mb-2">–ì–∞–π–¥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É:</h4>
                                  <p className="text-sm text-green-800 mb-3">{ifixitGuide.title}</p>
                                  {ifixitGuide.difficulty && (
                                    <p className="text-sm text-green-700 mb-2">
                                      üìä –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: <span className="font-semibold">{ifixitGuide.difficulty}</span>
                                    </p>
                                  )}
                                  {ifixitGuide.repairabilityScore && (
                                    <p className="text-sm text-green-700 mb-3">
                                      ‚≠ê –û—Ü—ñ–Ω–∫–∞ —Ä–µ–º–æ–Ω—Ç–æ–ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ: <span className="font-semibold">{ifixitGuide.repairabilityScore}</span>
                                    </p>
                                  )}
                                  <a
                                    href={ifixitGuide.url}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="inline-flex items-center gap-2 text-green-700 hover:text-green-900 font-semibold underline"
                                  >
                                    –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤–Ω–∏–π –≥–∞–π–¥ ‚Üí
                                  </a>
                                </div>
                              </div>
                            </div>
                          )}
                          {!guidesLoading && !ifixitGuide && selectedDevice && (
                            <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
                              <p className="text-sm text-amber-800">‚ö†Ô∏è –ì–∞–π–¥ —Ä–µ–º–æ–Ω—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é</p>
                            </div>
                          )}
                        </>
                      )}

                      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è */}
                      <div className="flex gap-3 pt-4">
                        <button
                          onClick={handleCloseModal}
                          className="flex-1 px-4 py-3 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                        >
                          –°–∫–∞—Å—É–≤–∞—Ç–∏
                        </button>
                        <button
                          onClick={handleCreateOrder}
                          className="flex-1 px-4 py-3 bg-purple-600 text-white rounded-lg font-medium hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                          disabled={!selectedColor || !selectedStorage}
                        >
                          ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Success Modal */}
      {showSuccessModal && createdOrderData && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 overflow-x-hidden">
          <div className="bg-white rounded-xl shadow-2xl max-w-md w-full overflow-hidden animate-in">
            {/* Success Header */}
            <div className="bg-gradient-to-r from-green-500 to-emerald-600 p-6 text-white text-center">
              <div className="text-5xl mb-3">‚úÖ</div>
              <h2 className="text-2xl font-bold">–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!</h2>
            </div>

            {/* Order Details */}
            <div className="p-6 space-y-4">
              <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                <div className="flex items-center gap-3">
                  <span className="text-2xl">üì±</span>
                  <div>
                    <p className="text-xs text-gray-600">–ú–æ–¥–µ–ª—å</p>
                    <p className="font-semibold text-gray-900">{createdOrderData.device}</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-2xl">üé®</span>
                  <div>
                    <p className="text-xs text-gray-600">–ö–æ–ª—ñ—Ä</p>
                    <p className="font-semibold text-gray-900">{createdOrderData.color}</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-2xl">üíæ</span>
                  <div>
                    <p className="text-xs text-gray-600">–ü–∞–º'—è—Ç—å</p>
                    <p className="font-semibold text-gray-900">{createdOrderData.storage}</p>
                  </div>
                </div>
              </div>

              {/* Message */}
              <div className="bg-blue-50 border-l-4 border-blue-500 p-4">
                <p className="text-sm text-blue-900">
                  üìû –ú–∞–π—Å—Ç—Ä–∏ –∑–º–æ–∂—É—Ç—å –ø–æ–±–∞—á–∏—Ç–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞–π–±–ª–∏–∂—á–∞—Å–æ–º. –ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞–º –ø—Ä–æ –≤—Å—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.
                </p>
              </div>

              {/* Close Button */}
              <button
                onClick={() => {
                  setShowSuccessModal(false);
                  setCreatedOrderData(null);
                }}
                className="w-full px-4 py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-lg font-semibold hover:from-green-600 hover:to-emerald-700 transition-all transform hover:scale-105"
              >
                –ß—É–¥–æ–≤–æ! üéâ
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
