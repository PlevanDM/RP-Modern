import { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Building2, 
  Home
} from 'lucide-react';

interface MasterPreferencesStepProps {
  onComplete?: (data: Record<string, unknown>) => void;
  onBack?: () => void;
}

export const MasterPreferencesStep = ({ onComplete, onBack }: MasterPreferencesStepProps) => {
  const [step, setStep] = useState<'brands' | 'repairs' | 'location' | 'experience'>('brands');
  const [repairBrands, setRepairBrands] = useState<string[]>([]);
  const [repairTypes, setRepairTypes] = useState<string[]>([]);
  const [isMobile, setIsMobile] = useState<boolean | null>(null);
  const [serviceAreas] = useState<string[]>([]);
  const [experience, setExperience] = useState<'beginner' | 'intermediate' | 'advanced' | 'expert' | null>(null);
  const [maxDistance, setMaxDistance] = useState<number | null>(null);

  const brands = [
    { id: 'apple', label: 'Apple', color: '#A8A8A8', icon: 'üçé' },
    { id: 'samsung', label: 'Samsung', color: '#1428A0', icon: 'üì±' },
    { id: 'xiaomi', label: 'Xiaomi', color: '#FF6900', icon: 'üì≤' },
    { id: 'huawei', label: 'Huawei', color: '#ED1C24', icon: 'üì±' },
    { id: 'oppo', label: 'Oppo', color: '#0066FF', icon: 'üì±' },
    { id: 'vivo', label: 'Vivo', color: '#415FFF', icon: 'üì±' },
    { id: 'oneplus', label: 'OnePlus', color: '#EB0029', icon: 'üì±' },
    { id: 'google', label: 'Google Pixel', color: '#4285F4', icon: 'üì±' },
    { id: 'sony', label: 'Sony', color: '#000000', icon: 'üì±' },
    { id: 'lg', label: 'LG', color: '#A50034', icon: 'üì±' },
    { id: 'nokia', label: 'Nokia', color: '#124191', icon: 'üì±' },
    { id: 'motorola', label: 'Motorola', color: '#5C92FA', icon: 'üì±' },
    { id: 'asus', label: 'ASUS', color: '#00539B', icon: 'üíª' },
    { id: 'lenovo', label: 'Lenovo', color: '#E2231A', icon: 'üíª' },
    { id: 'hp', label: 'HP', color: '#0096D6', icon: 'üíª' },
    { id: 'dell', label: 'Dell', color: '#007DB8', icon: 'üíª' },
    { id: 'acer', label: 'Acer', color: '#83B81A', icon: 'üíª' },
    { id: 'msi', label: 'MSI', color: '#FF0000', icon: 'üíª' },
  ];

  const repairTypesOptions = [
    { id: 'screen', label: '–ï–∫—Ä–∞–Ω–∏', description: '–ó–∞–º—ñ–Ω–∞ —Ç–∞ —Ä–µ–º–æ–Ω—Ç –¥–∏—Å–ø–ª–µ—ó–≤' },
    { id: 'battery', label: '–ë–∞—Ç–∞—Ä–µ—ó', description: '–ó–∞–º—ñ–Ω–∞ –∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ–≤' },
    { id: 'camera', label: '–ö–∞–º–µ—Ä–∏', description: '–†–µ–º–æ–Ω—Ç —Ç–∞ –∑–∞–º—ñ–Ω–∞ –∫–∞–º–µ—Ä' },
    { id: 'charging', label: '–ó–∞—Ä—è–¥–∫–∞', description: '–†–µ–º–æ–Ω—Ç —Ä–æ–∑\'—î–º—ñ–≤ —Ç–∞ –ø–ª–∞—Ç' },
    { id: 'software', label: '–ü–ó', description: '–ü—Ä–æ—à–∏–≤–∫–∞ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è' },
    { id: 'motherboard', label: '–ü–ª–∞—Ç–∏', description: '–†–µ–º–æ–Ω—Ç –º–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–∏—Ö –ø–ª–∞—Ç' },
    { id: 'housing', label: '–ö–æ—Ä–ø—É—Å–∏', description: '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–ø—É—Å—ñ–≤' },
    { id: 'audio', label: '–ê—É–¥—ñ–æ', description: '–î–∏–Ω–∞–º—ñ–∫–∏, –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∏' },
    { id: 'buttons', label: '–ö–Ω–æ–ø–∫–∏', description: '–ö–Ω–æ–ø–∫–∏ –∂–∏–≤–ª–µ–Ω–Ω—è, –≥—É—á–Ω–æ—Å—Ç—ñ' },
    { id: 'water', label: '–í–æ–¥–∞', description: '–ß–∏—Å—Ç–∫–∞ –ø—ñ—Å–ª—è –ø–æ–ø–∞–¥–∞–Ω–Ω—è –≤–æ–¥–∏' },
  ];

  const toggleBrand = (brandId: string) => {
    setRepairBrands(prev => 
      prev.includes(brandId) 
        ? prev.filter(id => id !== brandId)
        : [...prev, brandId]
    );
  };

  const toggleRepairType = (typeId: string) => {
    setRepairTypes(prev => 
      prev.includes(typeId) 
        ? prev.filter(id => id !== typeId)
        : [...prev, typeId]
    );
  };

  const handleBack = () => {
    if (step === 'brands') {
      onBack?.();
    } else if (step === 'repairs') {
      setStep('brands');
    } else if (step === 'location') {
      setStep('repairs');
    } else if (step === 'experience') {
      setStep('location');
    }
  };

  const handleNext = () => {
    if (step === 'brands' && repairBrands.length > 0) {
      setStep('repairs');
    } else if (step === 'repairs' && repairTypes.length > 0) {
      setStep('location');
    } else if (step === 'location' && isMobile !== null) {
      setStep('experience');
    } else if (step === 'experience' && experience) {
      handleComplete();
    }
  };

  const handleComplete = () => {
    onComplete?.({
      repairBrands,
      repairTypes,
      isMobile,
      serviceAreas,
      experience,
      maxDistance,
    });
  };

  return (
    <div className="space-y-6">
      {step === 'brands' && (
        <>
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">–Ø–∫—ñ –±—Ä–µ–Ω–¥–∏ –≤–∏ —Ä–µ–º–æ–Ω—Ç—É—î—Ç–µ?</h2>
            <p className="text-gray-600 text-sm">–û–±–µ—Ä—ñ—Ç—å –≤—Å—ñ –±—Ä–µ–Ω–¥–∏, –∑ —è–∫–∏–º–∏ –ø—Ä–∞—Ü—é—î—Ç–µ</p>
          </div>

          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
            {brands.map((brand) => {
              const isSelected = repairBrands.includes(brand.id);
              return (
                <motion.button
                  key={brand.id}
                  onClick={() => toggleBrand(brand.id)}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className={`p-4 rounded-xl border-2 transition-all duration-200 ${
                    isSelected
                      ? 'border-orange-500 bg-orange-50 shadow-md'
                      : 'border-gray-200 hover:border-orange-300 hover:shadow-sm'
                  }`}
                >
                  <div className="flex flex-col items-center">
                    <div className={`text-2xl mb-2 transition-transform ${
                      isSelected ? 'scale-125' : ''
                    }`}>{brand.icon}</div>
                    <div className={`font-medium text-xs ${isSelected ? 'text-orange-700' : 'text-gray-900'}`}>
                      {brand.label}
                    </div>
                  </div>
                </motion.button>
              );
            })}
          </div>
        </>
      )}

      {step === 'repairs' && (
        <>
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">–¢–∏–ø–∏ —Ä–µ–º–æ–Ω—Ç—ñ–≤</h2>
            <p className="text-gray-600 text-sm">–©–æ –≤–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ —Ä–µ–º–æ–Ω—Ç—É—î—Ç–µ?</p>
          </div>

          <div className="grid grid-cols-2 gap-3">
            {repairTypesOptions.map((repair) => {
              const isSelected = repairTypes.includes(repair.id);
              return (
                <motion.button
                  key={repair.id}
                  onClick={() => toggleRepairType(repair.id)}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className={`p-4 rounded-xl border-2 transition-all duration-200 text-left ${
                    isSelected
                      ? 'border-orange-500 bg-orange-50 shadow-md'
                      : 'border-gray-200 hover:border-orange-300 hover:shadow-sm'
                  }`}
                >
                  <div className="font-semibold text-sm text-gray-900 mb-1">{repair.label}</div>
                  <div className="text-xs text-gray-600">{repair.description}</div>
                </motion.button>
              );
            })}
          </div>
        </>
      )}

      {step === 'location' && (
        <>
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">–í–∏—ó–∑–¥–Ω–∞ —Ä–æ–±–æ—Ç–∞</h2>
            <p className="text-gray-600 text-sm">–ß–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –≤–∏ –Ω–∞ –≤–∏—ó–∑–¥—ñ?</p>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <motion.button
              onClick={() => setIsMobile(true)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className={`p-6 rounded-xl border-2 transition-all duration-200 ${
                isMobile === true
                  ? 'border-orange-500 bg-orange-50 shadow-md'
                  : 'border-gray-200 hover:border-orange-300'
              }`}
            >
              <div className="flex flex-col items-center">
                <Home className={`w-12 h-12 mb-3 ${isMobile === true ? 'text-orange-600' : 'text-gray-400'}`} />
                <div className={`font-semibold text-lg ${isMobile === true ? 'text-orange-700' : 'text-gray-700'}`}>
                  –¢–∞–∫, –≤–∏—ó–∑–Ω–∏–π –º–∞–π—Å—Ç–µ—Ä
                </div>
                <div className="text-sm text-gray-600 mt-2">–í–∏—ó–∂–¥–∂–∞—é –¥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤</div>
              </div>
            </motion.button>

            <motion.button
              onClick={() => setIsMobile(false)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className={`p-6 rounded-xl border-2 transition-all duration-200 ${
                isMobile === false
                  ? 'border-orange-500 bg-orange-50 shadow-md'
                  : 'border-gray-200 hover:border-orange-300'
              }`}
            >
              <div className="flex flex-col items-center">
                <Building2 className={`w-12 h-12 mb-3 ${isMobile === false ? 'text-orange-600' : 'text-gray-400'}`} />
                <div className={`font-semibold text-lg ${isMobile === false ? 'text-orange-700' : 'text-gray-700'}`}>
                  –ù—ñ, –≤ —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ
                </div>
                <div className="text-sm text-gray-600 mt-2">–ö–ª—ñ—î–Ω—Ç–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç—å –¥–æ –º–µ–Ω–µ</div>
              </div>
            </motion.button>
          </div>

          {isMobile === true && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-6 p-4 bg-orange-50 rounded-xl border border-orange-200"
            >
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –≤–∏—ó–∑–¥—É (–∫–º)
              </label>
              <input
                type="number"
                value={maxDistance || ''}
                onChange={(e) => setMaxDistance(Number(e.target.value))}
                placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥, 20"
                min="1"
                className="w-full px-4 py-2 rounded-lg border-2 border-gray-300 focus:border-orange-500 focus:outline-none"
              />
            </motion.div>
          )}
        </>
      )}

      {step === 'experience' && (
        <>
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">–í–∞—à –¥–æ—Å–≤—ñ–¥</h2>
            <p className="text-gray-600 text-sm">–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –≤ —Ä–µ–º–æ–Ω—Ç—ñ?</p>
          </div>

          <div className="grid grid-cols-2 gap-3">
            {[
              { id: 'beginner', label: '–ù–æ–≤–∞—á–æ–∫', desc: '–ú–µ–Ω—à–µ 1 —Ä–æ–∫—É', icon: 'üå±' },
              { id: 'intermediate', label: '–î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π', desc: '1-3 —Ä–æ–∫–∏', icon: '‚≠ê' },
              { id: 'advanced', label: '–ü—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª', desc: '3-5 —Ä–æ–∫—ñ–≤', icon: 'üî•' },
              { id: 'expert', label: '–ï–∫—Å–ø–µ—Ä—Ç', desc: '–ë—ñ–ª—å—à–µ 5 —Ä–æ–∫—ñ–≤', icon: 'üëë' },
            ].map((level) => (
              <motion.button
                key={level.id}
                onClick={() => setExperience(level.id as 'beginner' | 'intermediate' | 'advanced' | 'expert')}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className={`p-4 rounded-xl border-2 transition-all duration-200 ${
                  experience === level.id
                    ? 'border-orange-500 bg-orange-50 shadow-md'
                    : 'border-gray-200 hover:border-orange-300'
                }`}
              >
                <div className="text-center">
                  <div className="text-3xl mb-2">{level.icon}</div>
                  <div className={`font-semibold text-sm mb-1 ${
                    experience === level.id ? 'text-orange-700' : 'text-gray-900'
                  }`}>
                    {level.label}
                  </div>
                  <div className={`text-xs ${
                    experience === level.id ? 'text-orange-600' : 'text-gray-600'
                  }`}>
                    {level.desc}
                  </div>
                </div>
              </motion.button>
            ))}
          </div>
        </>
      )}

      <div className="flex gap-3 mt-6">
        <button
          onClick={handleBack}
          className="px-6 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-all"
        >
          –ù–∞–∑–∞–¥
        </button>
        <button
          onClick={handleNext}
          disabled={
            (step === 'brands' && repairBrands.length === 0) ||
            (step === 'repairs' && repairTypes.length === 0) ||
            (step === 'location' && isMobile === null) ||
            (step === 'experience' && !experience)
          }
          className="flex-1 py-2 bg-orange-600 text-white rounded-lg font-semibold hover:bg-orange-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {step === 'experience' ? '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' : '–î–∞–ª—ñ'}
        </button>
      </div>
    </div>
  );
};

