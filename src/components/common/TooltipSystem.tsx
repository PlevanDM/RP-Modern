import { useState } from 'react';
import { HelpCircle, X } from 'lucide-react';

interface TooltipProps {
  text: string;
  position?: 'top' | 'bottom' | 'left' | 'right';
  icon?: React.ReactNode;
  children?: React.ReactNode;
  delay?: number;
}

export function Tooltip({ text, position = 'top', icon, children, delay = 0 }: TooltipProps) {
  const [isVisible, setIsVisible] = useState(false);

  const positionClasses = {
    top: 'bottom-full mb-2 -translate-x-1/2 left-1/2',
    bottom: 'top-full mt-2 -translate-x-1/2 left-1/2',
    left: 'right-full mr-2 top-1/2 -translate-y-1/2',
    right: 'left-full ml-2 top-1/2 -translate-y-1/2'
  };

  const arrowClasses = {
    top: 'top-full left-1/2 -translate-x-1/2 border-t-gray-900 border-l-4 border-r-4 border-t-4 border-l-transparent border-r-transparent',
    bottom: 'bottom-full left-1/2 -translate-x-1/2 border-b-gray-900 border-l-4 border-r-4 border-b-4 border-l-transparent border-r-transparent',
    left: 'left-full top-1/2 -translate-y-1/2 border-l-gray-900 border-t-4 border-b-4 border-l-4 border-t-transparent border-b-transparent',
    right: 'right-full top-1/2 -translate-y-1/2 border-r-gray-900 border-t-4 border-b-4 border-r-4 border-t-transparent border-b-transparent'
  };

  return (
    <div className="relative inline-block">
      <button
        onMouseEnter={() => setTimeout(() => setIsVisible(true), delay)}
        onMouseLeave={() => setIsVisible(false)}
        onClick={() => setIsVisible(!isVisible)}
        className="inline-flex items-center"
        title={text}
      >
        {icon ? (
          icon
        ) : (
          <HelpCircle className="w-5 h-5 text-blue-500 hover:text-blue-600 transition cursor-help" />
        )}
      </button>

      {children}

      {isVisible && (
        <div
          className={`absolute z-50 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg whitespace-nowrap pointer-events-none ${positionClasses[position]}`}
          style={{ animation: 'fade-in 0.2s ease-in' }}
        >
          {text}
          <div className={`absolute w-0 h-0 ${arrowClasses[position]}`} />
        </div>
      )}
    </div>
  );
}

// –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
export function TooltipButton({
  text,
  onClick,
  children,
  className = '',
  position = 'top'
}: {
  text: string;
  onClick?: () => void;
  children: React.ReactNode;
  className?: string;
  position?: 'top' | 'bottom' | 'left' | 'right';
}) {
  return (
    <Tooltip text={text} position={position}>
      <button
        onClick={onClick}
        className={`relative group ${className}`}
      >
        {children}
      </button>
    </Tooltip>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
export const HELPFUL_HINTS = {
  escrow: 'üõ°Ô∏è Escrow —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–∞–µ—Ç –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã. –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.',
  rating: '‚≠ê –†–µ–π—Ç–∏–Ω–≥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ—Ç–∑—ã–≤–∞—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –í—ã—à–µ —Ä–µ–π—Ç–∏–Ω–≥ - –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã.',
  urgency: '‚è∞ –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –û–Ω–∏ –≤–∏–¥–Ω—ã –≤—Å–µ–º –º–∞—Å—Ç–µ—Ä–∞–º –ø–µ—Ä–≤—ã–º–∏.',
  budget: 'üí∞ –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.',
  verification: '‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–Ω–∏ –Ω–∞–¥–µ–∂–Ω–µ–µ.',
  commission: 'üí≥ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã. –ü—Ä–æ–∑—Ä–∞—á–Ω–æ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ.',
  portfolio: 'üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ —Ä–∞–±–æ—Ç—ã. –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º.',
  warranty: 'üîß –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—É –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–∞—Å—Ç–µ—Ä –∏—Å–ø—Ä–∞–≤–∏—Ç –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.',
  chat: 'üí¨ –û–±—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é —Å –º–∞—Å—Ç–µ—Ä–æ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã.',
  tracking: 'üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.'
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏
export function OnboardingHints() {
  const [hints, setHints] = useState([
    { id: 'welcome', title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã', text: '–≠—Ç–æ –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞ —Å –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π?', shown: false },
    { id: 'orders', title: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üìã', text: '–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤.', shown: false }
  ]);

  const dismissHint = (id: string) => {
    setHints(hints.map(h => h.id === id ? { ...h, shown: true } : h));
  };

  return (
    <div className="space-y-3">
      {hints.map(hint => (
        !hint.shown && (
          <div
            key={hint.id}
            className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded-r-lg flex items-start justify-between gap-4 animate-slide-in"
          >
            <div>
              <h4 className="font-semibold text-blue-900">{hint.title}</h4>
              <p className="text-sm text-blue-700 mt-1">{hint.text}</p>
            </div>
            <button
              onClick={() => dismissHint(hint.id)}
              className="p-1 hover:bg-blue-100 rounded transition-colors flex-shrink-0"
            >
              <X className="w-4 h-4 text-blue-600" />
            </button>
          </div>
        )
      ))}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–∞—è—á–∫–∞
export function InfoBadge({
  text,
  type = 'info',
  icon
}: {
  text: string;
  type?: 'info' | 'warning' | 'success' | 'error';
  icon?: React.ReactNode;
}) {
  const colors = {
    info: 'bg-blue-50 border-blue-200 text-blue-700',
    warning: 'bg-yellow-50 border-yellow-200 text-yellow-700',
    success: 'bg-green-50 border-green-200 text-green-700',
    error: 'bg-red-50 border-red-200 text-red-700'
  };

  const icons = {
    info: 'üìå',
    warning: '‚ö†Ô∏è',
    success: '‚úÖ',
    error: '‚ùå'
  };

  return (
    <div className={`border rounded-lg p-3 flex items-start gap-3 ${colors[type]}`}>
      <span className="text-lg flex-shrink-0">{icon || icons[type]}</span>
      <p className="text-sm">{text}</p>
    </div>
  );
}
