# Vultr API - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ c27acc98-d903-4c2e-b50c-2e1ca23451b0

Write-Host "üîç Vultr API - Server Information" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Cyan
Write-Host ""

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
$API_KEY = "WQVRXDQWELSA5ZIE3HZWVHJTZQE7JX7IK5ZA"
$API_BASE = "https://api.vultr.com/v2"
$SERVER_ID = "c27acc98-d903-4c2e-b50c-2e1ca23451b0"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
function Invoke-VultrAPI {
    param([string]$Method, [string]$Endpoint)

    $headers = @{
        "Authorization" = "Bearer $API_KEY"
        "Content-Type" = "application/json"
    }

    try {
        $response = Invoke-RestMethod -Method $Method -Uri "$API_BASE$Endpoint" -Headers $headers
        return $response
    } catch {
        Write-Host "‚ùå API Error: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

Write-Host "üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ..." -ForegroundColor Yellow

try {
    $serverResponse = Invoke-VultrAPI -Method "GET" -Endpoint "/instances/$SERVER_ID"

    if ($serverResponse) {
        $server = $serverResponse.instance

        Write-Host "üìã Server Details:" -ForegroundColor Blue
        Write-Host "  Server ID: $($server.id)" -ForegroundColor White
        Write-Host "  Label: $($server.label)" -ForegroundColor White
        Write-Host "  Status: $($server.status)" -ForegroundColor White
        Write-Host "  IP Address: $($server.main_ip)" -ForegroundColor White
        Write-Host "  Region: $($server.region)" -ForegroundColor White
        Write-Host "  Plan: $($server.plan)" -ForegroundColor White
        Write-Host "  OS: $($server.os)" -ForegroundColor White
        Write-Host "  Created: $($server.date_created)" -ForegroundColor White

        $serverIp = $server.main_ip

        Write-Host ""
        Write-Host "üîó Access URLs:" -ForegroundColor Blue
        Write-Host "  SSH: ssh root@$serverIp" -ForegroundColor White
        Write-Host "  Web: http://$serverIp" -ForegroundColor White
        Write-Host "  Vultr Console: https://my.vultr.com/subs/vps/novnc/?id=$SERVER_ID" -ForegroundColor White

        Write-Host ""
        Write-Host "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..." -ForegroundColor Yellow

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH (–º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–Ω—É—Ç—å, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º)
        Write-Host "  SSH Connection..." -ForegroundColor Cyan
        $sshTest = Test-NetConnection -ComputerName $serverIp -Port 22 -WarningAction SilentlyContinue
        if ($sshTest.TcpTestSucceeded) {
            Write-Host "  ‚úÖ SSH –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå SSH –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ firewall –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤)" -ForegroundColor Red
        }

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP
        Write-Host "  HTTP Connection..." -ForegroundColor Cyan
        try {
            $httpTest = Invoke-WebRequest -Uri "http://$serverIp" -TimeoutSec 10 -UseBasicParsing
            Write-Host "  ‚úÖ HTTP –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
        } catch {
            Write-Host "  ‚ùå HTTP –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: $($_.Exception.Message)" -ForegroundColor Red
        }

        Write-Host ""
        Write-Host "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Blue

        if ($server.status -eq "active") {
            Write-Host "1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É:" -ForegroundColor White
            Write-Host "   ssh root@$serverIp" -ForegroundColor Gray

            Write-Host "2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–ø–ª–æ–π:" -ForegroundColor White
            Write-Host "   chmod +x api-server-setup.sh" -ForegroundColor Gray
            Write-Host "   ./api-server-setup.sh" -ForegroundColor Gray

            Write-Host "3. –ò–ª–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å:" -ForegroundColor White
            Write-Host "   –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Vultr -> Console" -ForegroundColor Gray
            Write-Host "   –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ api-server-setup.sh" -ForegroundColor Gray
        } else {
            Write-Host "1. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞" -ForegroundColor Yellow
            Write-Host "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ Vultr –ø–∞–Ω–µ–ª–∏" -ForegroundColor Yellow
            Write-Host "3. –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–ø–ª–æ–π" -ForegroundColor Yellow
        }

    } else {
        Write-Host "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ" -ForegroundColor Red
    }

} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üìä –ï—Å–ª–∏ SSH –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:" -ForegroundColor Blue
Write-Host "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å Vultr" -ForegroundColor White
Write-Host "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ firewall: ufw status" -ForegroundColor White
Write-Host "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ SSH: systemctl restart ssh" -ForegroundColor White
Write-Host "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: journalctl -u ssh" -ForegroundColor White

Write-Host ""
Write-Host "üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:" -ForegroundColor Green
Write-Host "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor White
Write-Host "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ http://$serverIp" -ForegroundColor White
Write-Host "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã: docker-compose ps" -ForegroundColor White
